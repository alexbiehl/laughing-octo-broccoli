# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: redpy.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='redpy.proto',
  package='redpy.protocol',
  syntax='proto3',
  serialized_options=None,
  serialized_pb=_b('\n\x0bredpy.proto\x12\x0eredpy.protocol\"t\n\x05Input\x12/\n\nspawn_task\x18\x01 \x01(\x0b\x32\x19.redpy.protocol.SpawnTaskH\x00\x12\x31\n\x0btask_result\x18\x02 \x01(\x0b\x32\x1a.redpy.protocol.TaskResultH\x00\x42\x07\n\x05input\"v\n\x06Output\x12\x31\n\x0btask_result\x18\x01 \x01(\x0b\x32\x1a.redpy.protocol.TaskResultH\x00\x12/\n\nspawn_task\x18\x02 \x01(\x0b\x32\x19.redpy.protocol.SpawnTaskH\x00\x42\x08\n\x06output\"5\n\tSpawnTask\x12\x0f\n\x07task_id\x18\x01 \x01(\x04\x12\x17\n\x0fserialized_task\x18\x02 \x01(\x0c\"a\n\nTaskResult\x12\x0f\n\x07task_id\x18\x01 \x01(\x04\x12\x1b\n\x11serialized_result\x18\x02 \x01(\x0cH\x00\x12\x1b\n\x11\x65rror_description\x18\x03 \x01(\tH\x00\x42\x08\n\x06resultb\x06proto3')
)




_INPUT = _descriptor.Descriptor(
  name='Input',
  full_name='redpy.protocol.Input',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='spawn_task', full_name='redpy.protocol.Input.spawn_task', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='task_result', full_name='redpy.protocol.Input.task_result', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='input', full_name='redpy.protocol.Input.input',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=31,
  serialized_end=147,
)


_OUTPUT = _descriptor.Descriptor(
  name='Output',
  full_name='redpy.protocol.Output',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='task_result', full_name='redpy.protocol.Output.task_result', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='spawn_task', full_name='redpy.protocol.Output.spawn_task', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='output', full_name='redpy.protocol.Output.output',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=149,
  serialized_end=267,
)


_SPAWNTASK = _descriptor.Descriptor(
  name='SpawnTask',
  full_name='redpy.protocol.SpawnTask',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='task_id', full_name='redpy.protocol.SpawnTask.task_id', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='serialized_task', full_name='redpy.protocol.SpawnTask.serialized_task', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=269,
  serialized_end=322,
)


_TASKRESULT = _descriptor.Descriptor(
  name='TaskResult',
  full_name='redpy.protocol.TaskResult',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='task_id', full_name='redpy.protocol.TaskResult.task_id', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='serialized_result', full_name='redpy.protocol.TaskResult.serialized_result', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='error_description', full_name='redpy.protocol.TaskResult.error_description', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='result', full_name='redpy.protocol.TaskResult.result',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=324,
  serialized_end=421,
)

_INPUT.fields_by_name['spawn_task'].message_type = _SPAWNTASK
_INPUT.fields_by_name['task_result'].message_type = _TASKRESULT
_INPUT.oneofs_by_name['input'].fields.append(
  _INPUT.fields_by_name['spawn_task'])
_INPUT.fields_by_name['spawn_task'].containing_oneof = _INPUT.oneofs_by_name['input']
_INPUT.oneofs_by_name['input'].fields.append(
  _INPUT.fields_by_name['task_result'])
_INPUT.fields_by_name['task_result'].containing_oneof = _INPUT.oneofs_by_name['input']
_OUTPUT.fields_by_name['task_result'].message_type = _TASKRESULT
_OUTPUT.fields_by_name['spawn_task'].message_type = _SPAWNTASK
_OUTPUT.oneofs_by_name['output'].fields.append(
  _OUTPUT.fields_by_name['task_result'])
_OUTPUT.fields_by_name['task_result'].containing_oneof = _OUTPUT.oneofs_by_name['output']
_OUTPUT.oneofs_by_name['output'].fields.append(
  _OUTPUT.fields_by_name['spawn_task'])
_OUTPUT.fields_by_name['spawn_task'].containing_oneof = _OUTPUT.oneofs_by_name['output']
_TASKRESULT.oneofs_by_name['result'].fields.append(
  _TASKRESULT.fields_by_name['serialized_result'])
_TASKRESULT.fields_by_name['serialized_result'].containing_oneof = _TASKRESULT.oneofs_by_name['result']
_TASKRESULT.oneofs_by_name['result'].fields.append(
  _TASKRESULT.fields_by_name['error_description'])
_TASKRESULT.fields_by_name['error_description'].containing_oneof = _TASKRESULT.oneofs_by_name['result']
DESCRIPTOR.message_types_by_name['Input'] = _INPUT
DESCRIPTOR.message_types_by_name['Output'] = _OUTPUT
DESCRIPTOR.message_types_by_name['SpawnTask'] = _SPAWNTASK
DESCRIPTOR.message_types_by_name['TaskResult'] = _TASKRESULT
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Input = _reflection.GeneratedProtocolMessageType('Input', (_message.Message,), dict(
  DESCRIPTOR = _INPUT,
  __module__ = 'redpy_pb2'
  # @@protoc_insertion_point(class_scope:redpy.protocol.Input)
  ))
_sym_db.RegisterMessage(Input)

Output = _reflection.GeneratedProtocolMessageType('Output', (_message.Message,), dict(
  DESCRIPTOR = _OUTPUT,
  __module__ = 'redpy_pb2'
  # @@protoc_insertion_point(class_scope:redpy.protocol.Output)
  ))
_sym_db.RegisterMessage(Output)

SpawnTask = _reflection.GeneratedProtocolMessageType('SpawnTask', (_message.Message,), dict(
  DESCRIPTOR = _SPAWNTASK,
  __module__ = 'redpy_pb2'
  # @@protoc_insertion_point(class_scope:redpy.protocol.SpawnTask)
  ))
_sym_db.RegisterMessage(SpawnTask)

TaskResult = _reflection.GeneratedProtocolMessageType('TaskResult', (_message.Message,), dict(
  DESCRIPTOR = _TASKRESULT,
  __module__ = 'redpy_pb2'
  # @@protoc_insertion_point(class_scope:redpy.protocol.TaskResult)
  ))
_sym_db.RegisterMessage(TaskResult)


# @@protoc_insertion_point(module_scope)
